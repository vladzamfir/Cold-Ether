#!/usr/bin/env node
var web3 = require("web3")
var TX = require("ethereumjs-tx")
var rpc = 'http://localhost:8545'
var BN = require("bn.js")
web3.setProvider(new web3.providers.HttpProvider(rpc));

if(process.argv[2] === "help" || process.argv[2] === "--help" || process.argv[2] === "-h" || process.argv[2] === undefined ){
	console.log("\n")
	console.log("This utility packages an unsigned ethereum transaction")
	console.log("It requires running an ethereum node with rpc enabled at http://localhost:8545")

	console.log("\nusage: packagetx <sender> <receiver> <amount> [<gaslimit>] [<data>]\n")

	console.log("The \"amount\" of cryptoocurrency being sent is denominated in WEI")
	console.log("Recall that 1 ETH = 1000000000000000000 WEI\n")

	console.log("Leaving \"all\" in the amount section will create a transaction that empties the account\n")
	console.log("Setting the gaslimit and using \"all\" command sends the balance - gaslimit*gasprice")
	console.log("The \"gaslimit\" should be given manually when the transaction destination is a smart contract, or when there is tx data\n")
	console.log("The \"data\" should be provided in hex with an \"0x\" prefix")
	console.log("\n")

	process.exit()
}
//----------------------------Functions----------------------------------

String.prototype.toProperCase = function () {
    return this.replace(/\w\S*/g,  function(txt){return txt.substr(0).toLowerCase();} );
}

//----------------------------Packaging the transaction----------------------------------

//Lets get this party started..
var tx = new TX()

//set nonce
var sender = process.argv[2].toProperCase() 
var nonce = web3.eth.getTransactionCount(sender)
tx.nonce = nonce

//set the gasprice
var gasprice = web3.eth.gasPrice;
tx.gasPrice = new BN(web3.eth.gasPrice.toString(10));

//set the receiver address
var receiver = process.argv[3].toProperCase()
tx.to = receiver

//set transaction data
if (process.argv[6]){
	var data = process.argv[6]
	tx.data = data 
} else {
	tx.data = "0x"
}

//set the gas limit
if (process.argv[5]){
	tx.gasLimit = new BN(process.argv[5])
} else {
	tx.gasLimit = tx.getBaseFee()
}

//prepping for the "all" command
var txfee = tx.getUpfrontCost()
balance = web3.eth.getBalance(sender);
balance = new BN((balance.toString(10)));

//Set the value (in wei) of the cryptocurrency payload of the transaction
var val = new BN()
if (process.argv[4] == "all"){
	val = balance.sub(txfee)
} else {
	val = new BN(process.argv[4])
}
tx.value = val


//------------------------Return unsigned transaction--------------------------------------

console.log("\n\nJSON of the unsigned transaction:\n")
console.log( tx.toJSON(true) )

console.log("\n\nraw unsigned transaction:\n")
console.log("0x" + tx.serialize().toString("hex") + "\n\n")


//-------------Give a warning if the account has insufficient funds----------------------

//the gas cost of the tx, so we can check if we've allocated enough gas to execute the transaction
var balRequired = new BN(0)
balRequired = val.add(txfee)

//check if balance sufficient to pay value + gas
if(balRequired.cmp(balance) > 0) {
	console.log("\n\nYour account has insufficient balance to send the balance.\n");
	console.log("\nBalance:");
	console.log(balance.toString(10));
	console.log("\nRequired balance:");
	console.log(balRequired.toString(10));
	console.log("\nDifference balance in Wei:");
	console.log(balRequired.sub(balance).toString());
	console.log("\nDifference balance in gas:");
	console.log((balRequired.sub(balance)).div(new BN(tx.gasPrice)).toString());

}

process.exit()