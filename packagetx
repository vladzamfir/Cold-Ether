#!/usr/bin/env node
var web3 = require("web3")
var TX = require("ethereumjs-tx")
var rpc = 'http://localhost:8545'
var BN = require("bn.js")
web3.setProvider(new web3.providers.HttpProvider(rpc));


if(process.argv[2] === "help" || process.argv[2] === "--help" || process.argv[2] === "-h" || process.argv[2] === undefined ){
	console.log("\nThis utility packages an unsigned transaction")
	console.log("The amount given to the transaction is denominated in ether")
	console.log("Leaving \"all\" in the amount section will create a transaction that empties the account")
	console.log("This requires running an ethereum node with rpc enabled at http://localhost:8545")
	console.log("\nusage: packagetx <sender> <receiver> <amount> [<data>]\n")
	process.exit()
}


var sender = process.argv[2]
var receiver = process.argv[3]
var data = process.argv[5]
var gasprice = web3.eth.gasPrice
var nonce = web3.eth.getTransactionCount(sender)
var tx = new TX()

tx.nonce = nonce
tx.to = receiver
tx.data = data
tx.gasPrice = '0x' + web3.eth.gasPrice.toString(16)
tx.gasLimit = tx.getBaseFee()

balance = web3.eth.getBalance(sender)
balance = new BN(balance.toString(10))

txfee = tx.getUpfrontCost()

if(txfee.cmp(balance) > 0) {
	console.log("\n\n Your account has insufficient balance to send the balance.\n")

	console.log("\nBalance in Wei:")
	console.log(balance.toString(10))
	console.log("\nRequired fee in Wei:")
	console.log(txfee.toString(10))
	process.exit()
}

if(process.argv[4] == "all"){
	tx.value = balance - txfee
} else {
	tx.value = new BN(web3.toWei(process.argv[4],"ether").toString())
}

console.log("\n\nJSON of the unsigned transaction:\n")
console.log( tx.toJSON(true) )

console.log("\n\nraw unsigned transaction:\n")
console.log("0x" + tx.serialize().toString("hex") + "\n\n")
process.exit()