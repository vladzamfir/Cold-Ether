#!/usr/bin/env node
var web3 = require("web3")
var TX = require("ethereumjs-tx")
var rpc = 'http://localhost:8545'
web3.setProvider(new web3.providers.HttpProvider(rpc));


if(process.argv[2] === "help" || process.argv[2] === "--help" || process.argv[2] === "-h" || process.argv[2] === undefined ){
	console.log("\nThis utility packages an unsigned transaction")
	console.log("The amount given to the transaction is denominated in ether")
	console.log("Leaving \"all\" in the amount section will create a transaction that empties the account")
	console.log("This requires running an ethereum node with rpc enabled at http://localhost:8545")
	console.log("\nusage: packagetx <sender> <receiver> <amount> [<data>]\n")
	process.exit()
}





var sender = process.argv[2]
var receiver = process.argv[3]
var data = process.argv[5]
var gasprice = web3.eth.gasPrice
var nonce = web3.eth.getTransactionCount(sender)
var tx = new TX()

tx.nonce = nonce
tx.to = receiver
tx.data = data
tx.gasPrice = gasprice.toString(16)
tx.gasLimit = tx.getBaseFee()


var amount
if(process.argv[4] == "all"){
	amount = 0
	balance = web3.eth.getBalance(sender)
	txfee = tx.getUpfrontCost()
	if(txfee > balance) {
		console.log("\n Your account has insufficient balance to send the balance.\n")
		process.exit()
	} else {
		tx.value = balance - txfee
	}
	
} else {
	amount = web3.toWei(process.argv[4],"ether")
	tx.value = amount
}


  //-> the total amoutn needed in the account of the sender for the transaction to be valid
if(tx.getUpfrontCost() > web3.eth.getBalance(sender)) {
	console.log("\n Warning: your account appears to have insufficient funds to send this transaction.\n")
}


console.log("0x" + tx.serialize().toString("hex"))
process.exit()